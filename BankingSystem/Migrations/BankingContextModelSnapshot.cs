// <auto-generated />
using System;
using BankingSystem.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BankingSystem.Migrations
{
    [DbContext(typeof(BankingContext))]
    partial class BankingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BankingSystem.Models.Account", b =>
                {
                    b.Property<long>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Account_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AccountId"));

                    b.Property<long?>("AccountStatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("AccountStatus_id");

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AccountType_id");

                    b.Property<decimal?>("Balance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long?>("BranchId")
                        .HasColumnType("bigint")
                        .HasColumnName("Branch_id");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("Currency_id");

                    b.Property<DateTime?>("DateClosed")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_closed");

                    b.Property<DateTime?>("DateOpened")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_opened");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("User_ID");

                    b.HasKey("AccountId");

                    b.HasIndex("AccountStatusId");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("UserId", "AccountTypeId")
                        .IsUnique()
                        .HasDatabaseName("UX_User_AccountType")
                        .HasFilter("[User_ID] IS NOT NULL");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("BankingSystem.Models.AccountType", b =>
                {
                    b.Property<int>("AccountTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AccountType_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountTypeId"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("AccountTypeId");

                    b.ToTable("AccountType", (string)null);
                });

            modelBuilder.Entity("BankingSystem.Models.Branch", b =>
                {
                    b.Property<long>("BranchId")
                        .HasColumnType("bigint")
                        .HasColumnName("Branch_id");

                    b.Property<string>("BranchName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Branch_name");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("BranchId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("BankingSystem.Models.Currency", b =>
                {
                    b.Property<int>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Currency_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CurrencyId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(20, 4)");

                    b.HasKey("CurrencyId");

                    b.ToTable("Look_Currency");
                });

            modelBuilder.Entity("BankingSystem.Models.LookAccountStatus", b =>
                {
                    b.Property<long>("StatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("Status_id");

                    b.Property<string>("StatusName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Status_name");

                    b.HasKey("StatusId");

                    b.ToTable("Look_AccountStatus");
                });

            modelBuilder.Entity("BankingSystem.Models.LookUserType", b =>
                {
                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    b.Property<string>("TypeName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("TypeId");

                    b.ToTable("Look_UserType");
                });

            modelBuilder.Entity("BankingSystem.Models.Transaction", b =>
                {
                    b.Property<long>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Transaction_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TransactionId"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("EquivalentRate")
                        .HasColumnType("decimal(20, 4)")
                        .HasColumnName("EquivalentRate");

                    b.Property<long?>("ReceiverAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("Receiver_Account_id");

                    b.Property<long?>("SenderAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("Sender_Account_id");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("Status");

                    b.Property<DateTime?>("TimeStamp")
                        .HasColumnType("datetime");

                    b.HasKey("TransactionId");

                    b.HasIndex("ReceiverAccountId");

                    b.HasIndex("SenderAccountId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("BankingSystem.Models.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("User_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Fname")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Lname")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("UserTypeId")
                        .HasColumnType("int")
                        .HasColumnName("UserType_id");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("UX_User_Email");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasDatabaseName("UX_User_Phone");

                    b.HasIndex("UserTypeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BankingSystem.Models.Account", b =>
                {
                    b.HasOne("BankingSystem.Models.LookAccountStatus", "AccountStatus")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountStatusId")
                        .HasConstraintName("FK_Accounts_Look_AccountStatus");

                    b.HasOne("BankingSystem.Models.AccountType", "AccountType")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Accounts_AccountType");

                    b.HasOne("BankingSystem.Models.Branch", "Branch")
                        .WithMany("Accounts")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_Accounts_Branches");

                    b.HasOne("BankingSystem.Models.Currency", "Currency")
                        .WithMany("Accounts")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Accounts_Currency");

                    b.HasOne("BankingSystem.Models.User", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Accounts_Users");

                    b.Navigation("AccountStatus");

                    b.Navigation("AccountType");

                    b.Navigation("Branch");

                    b.Navigation("Currency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BankingSystem.Models.Transaction", b =>
                {
                    b.HasOne("BankingSystem.Models.Account", "ReceiverAccount")
                        .WithMany("TransactionReceiverAccounts")
                        .HasForeignKey("ReceiverAccountId")
                        .HasConstraintName("FK_Transaction_Accounts1");

                    b.HasOne("BankingSystem.Models.Account", "SenderAccount")
                        .WithMany("TransactionSenderAccounts")
                        .HasForeignKey("SenderAccountId")
                        .HasConstraintName("FK_Transaction_Accounts");

                    b.Navigation("ReceiverAccount");

                    b.Navigation("SenderAccount");
                });

            modelBuilder.Entity("BankingSystem.Models.User", b =>
                {
                    b.HasOne("BankingSystem.Models.LookUserType", "UserType")
                        .WithMany("Users")
                        .HasForeignKey("UserTypeId")
                        .HasConstraintName("FK_Users_Look_UserType");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("BankingSystem.Models.Account", b =>
                {
                    b.Navigation("TransactionReceiverAccounts");

                    b.Navigation("TransactionSenderAccounts");
                });

            modelBuilder.Entity("BankingSystem.Models.AccountType", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("BankingSystem.Models.Branch", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("BankingSystem.Models.Currency", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("BankingSystem.Models.LookAccountStatus", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("BankingSystem.Models.LookUserType", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BankingSystem.Models.User", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
